<!DOCTYPE html>
<!-- saved from url=(0047)https://blue.cs.sonoma.edu/~angomez/start5.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <script src="./start5_files/initShaders.js"></script>

        <script id="vertex-shader" type="x-shader/x-vertex">
	    precision mediump float;
	    uniform float N;
	    uniform float t;

            out float radius;

            void main() {
	        if (gl_VertexID == 0) {
		        gl_Position = vec4(0.0, 0.0, 0.0, 1.0);
			return;
		}

		float radius = (gl_VertexID % 2 == 0) ? 1.0 : 0.4;

	    	float vid = float(gl_VertexID);

		const float Pi = 3.14159265358979;
		
		//float angle = vid * 2.0 * Pi / N;//Hole in the star
		//float angle = vid * 2.0 * Pi / float(N-2);//Does not even work
		float angle = vid * 2.0 * Pi / float(10) + t;//Works but unsure if that is how it supposed to be done
		
		vec2 v = radius * vec2(cos(angle), sin(angle));
		
		gl_Position = vec4(v, 0.0, 1.0);
            }
        </script>
        
        <script id="fragment-shader" type="x-shader/x-fragment">
                precision mediump float;
		uniform float t; // Time for animation
		out vec4 fColor;
		in float radius; // Used to create color variation
		void main() {
    			// Define some base colors
    			vec4 color1 = vec4(1.0, 0.0, 0.0, 1.0); // Red
    			vec4 color2 = vec4(0.0, 0.0, 1.0, 1.0); // Blue
    			vec4 color3 = vec4(0.0, 1.0, 0.0, 1.0); // Green

    			// Interpolate color based on time and vertex radius
    			float mixFactor1 = sin(t) * 0.5 + 0.5;
    			float mixFactor2 = cos(t) * 0.5 + 0.5;

    			vec4 blendedColor = mix(color1, color2, mixFactor1);
    			blendedColor = mix(blendedColor, color3, mixFactor2);

    			fColor = blendedColor;
			}
        </script>

        <script>
            window.onload = () => {
                var canvas = document.getElementById("webgl");
                var gl = canvas.getContext("webgl2");

                gl.clearColor(0.1, 0.1, 0.1, 1.0);

                var program = initShaders(gl, "vertex-shader", "fragment-shader");
                
                // These are lines that we'll need a bit later.
                var uN = gl.getUniformLocation(program, "N");
                var uTime = gl.getUniformLocation(program, "t");

                var t = 0.0;

                var render = () => {
                    t += 0.01;  // Tick time
                    gl.uniform1f(uTime, t);
		    gl.clear(gl.COLOR_BUFFER_BIT);
                    gl.useProgram(program);

                    const N = 12;// number of vertices

                    // Other code we'll need later, in combination with the
                    //   code above marked for later use.
                    gl.uniform1f(uN, N);
                    gl.uniform1f(uTime, t);

                    gl.drawArrays(gl.TRIANGLE_FAN, 0, N);

                    requestAnimationFrame(render);
                };

                render();
            };
        </script>
    </head>

    <body data-new-gr-c-s-check-loaded="14.1103.0" data-gr-ext-installed="">
        <canvas id="webgl" width="512" height="512"></canvas>
    

</body><grammarly-desktop-integration data-grammarly-shadow-root="true"><template shadowrootmode="open"><style>
      div.grammarly-desktop-integration {
        position: absolute;
        width: 1px;
        height: 1px;
        padding: 0;
        margin: -1px;
        overflow: hidden;
        clip: rect(0, 0, 0, 0);
        white-space: nowrap;
        border: 0;
        -moz-user-select: none;
        -webkit-user-select: none;
        -ms-user-select:none;
        user-select:none;
      }

      div.grammarly-desktop-integration:before {
        content: attr(data-content);
      }
    </style><div aria-label="grammarly-integration" role="group" tabindex="-1" class="grammarly-desktop-integration" data-content="{&quot;mode&quot;:&quot;full&quot;,&quot;isActive&quot;:true,&quot;isUserDisabled&quot;:false}"></div></template></grammarly-desktop-integration></html>